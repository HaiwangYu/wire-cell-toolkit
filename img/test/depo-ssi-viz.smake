# Default configuration.  Provide your own with --configfile or
# override specific args with --config
configfile: workflow.source_path("depo-ssi-viz.yaml")

# evil shortcut to promote keys to variables
for k,v in config.items(): globals()[k] = v

# derived from config.  note, may need variant as partial key.
anodes = {
    "pdsp": list(range(6)),
    "uboone": [0]
}[detector]

# literals, tied to the job and not subject to config
frame_tiers = ["adc", "sig"]
cluster_tiers = ["img", "tru"]

# where output goes
detdir=f"{outdir}/{detector}"
wctdir=f"{detdir}/wct"   # wire-cell output
pltdir=f"{detdir}/plots" # plot PDFs
pvdir =f"{detdir}/pv"    # paraview files

rule intern_depos:
    input:
        f"{depofile}"
    output:
        f"{wctdir}/depos-input.npz"
    shell: """
    cp {input} {output}
    """

rule augment_depos:
    input: 
        rules.intern_depos.output
    output:
        f"{wctdir}/depos-augmented.npz"
    shell: """
    wirecell-img transform-depos -o {output} \
      --rotate 'x:45*degree' \
      --rotate 'z:45*degree' \
      --forward {input}
    """

# Explanation of the tourtourous coupling you see w.r.t Jsonnet/JSON
# handling.  For simple jobs without all the extra diagnostics, we
# would NOT generate a JSON version of the Jsonnet config.  We would
# simply have wire-cell consume Jsonnet directly.  But we also want to
# process the config in Python and the Python jsonnet package only
# provides the slower C++/Jsonnet implementation.  So we use the
# faster wcsonnet/Go/Jsonnet to make the JSON for Python to consume.
# But, since we make the JSON anyways, we might was well use it also
# when calling wire-cell so we do not need to repeat all TLAs.  Clear
# as mud.
rule jsonify:
    input: 
        jobcfg
    output:
        f"{wctdir}/depo-ssi-viz.json"
    params:
        indepos=rules.augment_depos.output,
        outdepos=f"{wctdir}/depos-drifted.npz",
        frames=f"{wctdir}/frames-%(tier)s-a%(anode)s.npz",
        clusters=f"{wctdir}/clusters-%(tier)s-a%(anode)s.npz"
    shell: """
    wcsonnet \
      -A 'detector={detector}' \
      -A 'variant={variant}' \
      -A 'indepos={params.indepos}' \
      -A 'outdepos={params.outdepos}' \
      -A 'frames={params.frames}' \
      -A 'clusters={params.clusters}' \
      {input} > {output}
    """

rule wctify:
    input:
        cfg=rules.jsonify.output,
        depos=rules.augment_depos.output
    output:
        log=f"{wctdir}/wire-cell.log",
        drifted=f"{wctdir}/depos-drifted.npz",
        frames=expand(f"{wctdir}/frames-{{tier}}-a{{anode}}.npz", tier=frame_tiers, anode=anodes),
        clusters=expand(f"{wctdir}/clusters-{{tier}}-a{{anode}}.npz", tier=cluster_tiers, anode=anodes)
    shell: """
    wire-cell -l stderr -l {output.log} -L debug -c {input.cfg} || exit -1
    for one in {output.clusters} ; do
        if [ -n "$(file $one | grep empty)" ] ; then
          echo "Empty cluster file $one"
          rm -f $one
          touch $one
        fi
    done
    """
## use of zip leaves an "empty" file of a few bytes which makes it hard to test for later.


rule plot_drifted:
    input:
        rules.wctify.output.drifted
    output:
        f"{pltdir}/plot-depos-drifted-i{{index}}-{{plotname}}.pdf"
    shell: """
    wirecell-gen plot-depos -p {wildcards.plotname} -i{wildcards.index} {input} {output}
    """
rule plot_augmented:
    input:
        rules.augment_depos.output
    output:
        f"{pltdir}/plot-depos-augmented-i{{index}}-{{plotname}}.pdf"
    shell: """
    wirecell-gen plot-depos -p {wildcards.plotname} -i{wildcards.index} {input} {output}
    """

rule plot_depos_all:
    input:
        expand(rules.plot_drifted.output,
               index=[0,1], plotname=["tyqscat", "tzqscat"]),
        expand(rules.plot_augmented.output,
               index=[0,1], plotname=["qxz", "qzy", "qxy"])

rule plot_adc_frames:
    input:
        f"{wctdir}/frames-adc-a{{anode}}.npz"
    output:
        f"{pltdir}/frames-adc-a{{anode}}-i{{index}}.pdf"
    shell: """
    wirecell-util npz-to-img \
    --array frame_orig{wildcards.anode}_{wildcards.index} \
    --cmap seismic \
    --title "$(basename {input})" \
    --xtitle 'Relative tick number' \
    --ytitle 'Relative channel number' \
    --ztitle 'ADC (median subtracted)' \
    --vmin '-50' --vmax '50' --mask 0 --dpi 600 \
    --baseline='median'\
    -o "{output}" "{input}"
    """

rule plot_sig_frames:
    input:
        f"{wctdir}/frames-sig-a{{anode}}.npz"
    output:
        f"{pltdir}/frames-sig-a{{anode}}-i{{index}}.pdf"
    shell: """
    wirecell-util npz-to-img \
    --array frame_gauss{wildcards.anode}_{wildcards.index} \
    --cmap viridis \
    --title "$(basename {input})" \
    --xtitle 'Relative tick number' \
    --ytitle 'Relative channel number' \
    --ztitle 'Signal (ionization electrons)' \
    --vmin '0' --vmax '10000' --mask 0 --dpi 600 \
    -o "{output}" "{input}"
    """

rule plot_frames_all:
    input:
        expand(f"{pltdir}/frames-{{tier}}-a{{anode}}-i{{index}}.pdf",
               tier=frame_tiers, anode=anodes, index=[0,1])


rule pv_depos_orig:
    input:
        rules.augment_depos.output
    output:
        f"{pvdir}/depos-augmented.vtp"
    shell: """
    wirecell-img paraview-depos --speed 0 {input} {output}
    """
rule pv_depos_drifted:
    input:
        rules.wctify.output.drifted
    output:
        f"{pvdir}/depos-drifted.vtp"
    params:
        drift_speed
    shell: """
    wirecell-img paraview-depos --speed {params} {input} {output}
    """
rule pv_blobs:
    input:
        f"{wctdir}/clusters-{{tier}}-a{{anode}}.npz"
    output:
        f"{pvdir}/clusters-{{tier}}-a{{anode}}.vtu"
    params:
        drift_speed
    shell: """
    if [ -s {input} ] ; then
        wirecell-img paraview-blobs --speed "{params}" {input} {output}
    else
        touch {output}
    fi
    """

rule pv_all:
    input:
        rules.pv_depos_orig.output,
        rules.pv_depos_drifted.output,
        expand(rules.pv_blobs.output, tier=["img"], anode=anodes)

rule plot_blobs:
    input:
        f"{wctdir}/clusters-{{tier}}-a{{anode}}.npz"
    output:
        f"{pltdir}/clusters-{{tier}}-a{{anode}}-{{plotname}}.pdf"
    shell: """
    if [ -s {input} ] ; then
      wirecell-img plot-blobs -p {wildcards.plotname} {input} {output}
    else
      touch {output}
    fi
    """

rule plot_blobs_all:
    input:
        expand(f"{pltdir}/clusters-{{tier}}-a{{anode}}-{{plotname}}.pdf", tier=cluster_tiers, anode=anodes, plotname=["ty", "tz", "views"])

rule plot_all:
    input:
        rules.plot_depos_all.input,
        rules.plot_frames_all.input,
        rules.plot_blobs_all.input


rule dotify:
    input: 
        rules.jsonify.output
    output:
        f"{wctdir}/depo-ssi-viz-flow-graph.pdf"
    shell: """
    wirecell-pgraph dotify --no-params {input} {output}
    """
        
rule all:
    input:
        rules.dotify.output,
        rules.pv_all.input,
        rules.plot_all.input
        
