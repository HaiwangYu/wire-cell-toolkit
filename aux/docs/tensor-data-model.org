#+title: Wire-Cell Toolkit Tensor Set Data Model
#+setupfile: ../../util/docs/setup-note.org

* Introduction

This document defines the Wire-Cell Toolkit (WCT) /tensor data model/.
The model is described in two levels: "basic" or "general" and
"specific".

The basic tensor data model is described in terms of two simple
conceptual types: a generic "tensor" type and a set of such tensors.
In WCT code these concepts are directly implemented in the WCT data
interface classes ~ITensor~ and ~ITensorSet~, respectively.

The specific tensor data model contains specifications for how to map
select other data types to the basic tensor data model.  In practice,
this means specifying methods of conversion between the other data
type and ~ITensor~ instances.  I/O methods may then be defined in a
manner that only depends on the basic tensor data model and thus
avoids a proliferation of I/O methods.  The specific tensor data model
defines how the following WCT data types are mapped to the basic
tensor data model.
- ~IFrame~ :: raw or signal processed waveforms.
- ~ICluster~ :: "cluster graph" of a heterogeneous set of vertices for 3D "blob" level imaging.
- ~Dataset~ :: concrete set of named arrays of common length, specifically for point-cloud.
As new types are supported by the model, this list shall grow to include them.

The next section defines the basic tensor data model followed.
Following it is a section defining the specific tensor data model.
These sections are written in rfc2119 language.

* Basic tensor data model

** Tensor

The basic tensor data model "tensor" shall be composed of two
conceptual parts: an array part and a metadata (MD) part.

The array part is composed of an array of elements that shall be
stored contiguously and associated with the array *shape*, layout *order*
and element *type* and *size*.

The array *shape* shall be represented as a vector of integer type with each
element corresponding to the number of elements spanned in the
associated dimension.

The array layout *order* shall be represented as a vector which stores
the majority of the dimensions or it shall be empty indicating "C"
layout.  A "C" layout should be used.

The array element *type* shall be represented as a string with values
following Numpy [[https://numpy.org/doc/stable/reference/arrays.interface.html#arrays-interface][array interface]] ~typestr~ specification.  This typically
means a letter followed by a number giving the size in bytes of the
type.

The array element *size* shall be represented as an integer providing
the size of one element measured in bytes.

A tensor *MD* shall follow the JSON data model and be of type object.
If the MD is used to hold the array metadata as just described it
shall use an object with attribute keywords identical to the terms
given above in *bold* face and this object shall be held in an MD
attribute named ~"array"~.  Array metadata may be stored outside the MD
object.  Additional MD attributes are required by the specific tensor
data model.  User application may add attributes not reserved here.
The MD must be faithfully passed through any tensor converter round
trip.

The basic tensor data model "tensor set" shall be composed of two
conceptual parts: a sequence of tensors and a metadata part.  A tensor
set shall not contain other tensor sets.

The tensor set sequence of tensors shall have a stable ordering.  The
sequence may be empty.  A tensor may be contained in more than one
tensor set sequence.

The tensor set MD object shall follow the JSON data model and be of
type object.  The specific tensor data model must make no requirements
on its contents.  The tensor data model places no restriction on user
application attributes.  The MD must be faithfully passed through any
tensor set converter round trip.

* Specific tensor data model

A tensor MD shall have an attribute *datapath* which is intended to
identify and locate the tensor in a hierarchical structure of multiple
tensors.  The datapath value shall be unique among all tensors in a
set.  The value type of a datapath shall be string.  The string value
shall be intereted as a sequence of identifiers separated by a ~"/"~
(slash) character.  Each identifier must consist of the set of
characters which are valid for use as names of C++ or Python variables
or functions.  A datapath value may be used to refer to a tensor in
the context of its contiaining tensor set.

A tensor MD shall have an attribute *datatype* which is intended to
identify the specific data type it represents.  The datatype value is
a string and takes a value from a limited set as described below.
Additional requirements on MD attributes are specified based on the
value of the datatype.

A single tensor is not sufficient to represent most complex specific
data types.  A tensor may represent an *aggragate* of other tensors.
Aggregation is achieved by a specific datatype defining a required MD
attribute set which reference other tensors by their datapath.

** Overview of types

The following specific types are mapped to the basic tensor data
model.  Each item in the list gives the *datatype* MD attribute value
and describes the WCT data type to which it associates.

- pcarray :: a ~PointCloud::Array~
- pcdataset :: a ~PointCloud::Dataset~
- pcgraph :: (C++ class tbd) a vertex dataset representing point cloud and edge dataset representing their connections

- trace :: one ~ITrace~ as 1D array or multiple ~ITrace~ as 2D array.
- tracedata :: tagged trace indices and summary data
- frame :: an ~IFrame~ as aggregate of traces and/or traceblocks

- cluster :: an ~ICluster~ 
The specific requirements for each data type are given in the
following sections in terms of their tensor array and metadata and in
some cases in terms of other types defined previously.

** pcarray

The *datatype* of *pcarray* indicates a tensor representing one
~PointCloud::Array~.

The tensor array information shall map directly to that of ~Array~.

A *pcarray* places no additional requirements on its tensor MD.

** pcdataset

The *datatype* of *pcdataset* indicates a tensor representing on
~PointCloud::Dataset~.

The tensor array shall be empty.

The tensor MD shall have the following attributes:

- arrays :: an object representing the named arrays.  Each attribute name provides the array name and each attribute value provides a *datapath* to a tensor of type *pcarray* holding the named array.

Additional user application ~Dataset~ metadata may reside in the tensor
MD.

** pcgraph

The *datatype* of *pcgraph* indicates a tensor representing a point cloud
graph (C++ type TBD).  

The tensor array shall be empty.

The tensor MD shall aggregates parts comprising the graph via datapath
references to other tensors.

The *nodes* attribute with string value shall provide reference to
another tensor representing a *pcdataset*.  Each point shall be
interpreted as a graph vertex and each *pcarray* as a feature spanning
the vertices.

The *edges* attribute value shall be an type object with three
attributes.  The *path* attribute shall be of type string and provide
the *datapath* of a tensor in the common set of datatype *pcdataset*.
This tensor shall be considered to provide two integer arrays
providing edge tail and head indices of vertices into the *nodes*
dataset.  The attribute *tails* and *heads* shall be of type string and
provide names of the arrays in the edges data set that provide the
corresponding index arrays.

Multiple *pcgraph* tensors may be defined which share either *nodes* or
*edges* datasets.

** trace

The *datatype* of *trace* indicates a tensor representing a single ~ITrace~
or a collection of ~ITrace~ which have been combined.

The tensor array shall represent the samples over a contiguous period
of time from traces.

The tensor array shall have dimensionality of one when representing a
single ~ITrace~.  A collection of ~ITrace~ shall be represented with a
two-dimensional array with each row representing one or more traces
from a common channel.  In such a case, the full trace content
associated with a given channel may be represented by one or more
rows.

The array element type shall be either ~"i2"~ (~int16_t~) or ~"f4"~ (~float~)
depending on if ADC or signals are represented, respectively.

The tensor MD may include the attribute *tbin* with integer value and
providing the number of sample periods (ticks) between the frame
reference time and the first sample (column) in the array.

** tracedata

The *datatype* of *tracedata* provides per-trace information for a subset
of.  It is similar to a *pcdataset* and in fact may carry that value as
the *datatype* but it requires the following differences.

It defines additional MD attributes:

- tag :: optional, a trace tag.  If omitted or empty string, dataset must span total trace ordering.

The following array names are recognized:

- chid :: channel ident numbers for the traces.

- index :: provides indices into the total trace ordering.  

- summary :: trace summary values.

A chid value is require for every trace.  If the *tracedata* has no *tag*
then a *chid* array spanning the total trace ordering must be provided
and neither *index* nor *summary* is recognized.  If the *tracedata* has a
*tag* it must provide an *index* array and may provide a *summary* array and
may provide a *chid* array each corresponding to the traces identified
by *index*.

** frame

The *datatype* of *frame* represents an ~IFrame~.

The tensor array shall be empty.

The tensor MD aggregates tensors of datatype *trace* and *tracedata* and
provides other values as listed;

- ident :: the frame ident number (required)

- tags :: an array of string giving frame tags

- time :: the reference time of the frame (required)

- tick :: the sample period of the traces (required)

- masks :: channel mask map (optional)
  
- traces :: a sequence of datapath references to tensors of datatype *trace*.  The order of this sequence, along with the order of rows in any 2D *trace* tensors determines the /total order of traces/.

- tracedata :: a sequence of datapath references to tensors of datatype *tracedata*

In converting an ~IFrame~ to a *frame* tensor the sample values may be
truncated to *type* ~"i2"~.

A frame tensor of type ~"i2"~ shall have its sample values inflated to
type ~float~ when converted to an ~IFrame~.

** cluster

A ~cluster~ is a ~pcgraph~ with convention for how to serialize each of
its node types as described here.

*** wire

*** channel

*** measure

*** blob

*** slice

* Similarity to HDF5

The data model is intentionally similar to HDF5 abstract data model
and there is a conceptual mapping between the two:

#+begin_center
HDF5 group hierarchy

$\leftrightarrow$ 

~ITensor~ metadata attribute providing a hierarchy path as array of string.
#+end_center

#+begin_center
HDF5 group 

$\leftrightarrow$ 

No direct equivalent but an ~ITensor~ with no array is effectively the same.
#+end_center

#+begin_center
HDF5 dataset

$\leftrightarrow$ 

~ITensor~ array.
#+end_center

#+begin_center
HDF5 dataspace and datatype

$\leftrightarrow$ 

~ITensor~ methods ~shape()~, ~dtype()~, etc.
#+end_center

#+begin_center
HDF5 group or dataset attribute

$\leftrightarrow$ 

~ITensor~ metadata attribute
#+end_center

