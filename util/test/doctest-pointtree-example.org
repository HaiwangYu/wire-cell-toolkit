#+title: The Point Tree Example
#+setupfile: ../../docs/setup-topic.org
#+LATEX_HEADER: \usepackage[margin=1.0in]{geometry}


* Overview

  A "point tree" refers to an [[https://en.wikipedia.org/wiki/M-ary_tree][n-ary tree]] with nodes that hold a set of "local" point clouds with each referenced by a name (~std::string~).  The caller may ask any node for a local point cloud by name.  The caller may also ask for a view on a subset of these local point clouds in a given scope.  This view is effectively a larger point cloud and based on it a k-d tree may also be formed.  There are also a number of classes and iterators that simplify use of points, point clouds (be they contiguous or as a collection of point clouds), k-d trees and the overall n-ary tree.

* Meta

This document is meant to be read linearly but one may also jump around to find specific examples.  It describes the following data structures: point clouds, selections, point trees and k-d trees and related types.  Also provided are several C++ code examples in the form of doctest test cases.  

  The source for this document is in org markup.  You may read that form directly or you may use Emacs to /export/ the org content to HTML with ~C-c C-e h h~ or to PDF with ~C-c C-e l p~.  The org content may also be /tangled/ to produce the ~doctest_pointtree_example.cxx~ source file with ~C-c C-v t~.  Depending on where you are reading this document you may find these links provide it in the different formats: [[file:doctest-pointtree-example.html][HTML]], [[file:doctest-pointtree-example.pdf][PDF]], [[file:doctest-pointtree-example.cxx][C++]].

* Preamble

  The main entry point is the API in ~PointTree.h~.  Additional headers are for the doctest framework.

#+begin_src c++ :tangle doctest-pointtree-example.cxx
#include "WireCellUtil/PointTree.h"

#include "WireCellUtil/PointTesting.h"
#include "WireCellUtil/doctest.h"
#include "WireCellUtil/Logging.h"

using namespace WireCell;
using namespace WireCell::PointCloud;
using namespace WireCell::PointCloud::Tree; // for "Points" node value type
using namespace WireCell::PointTesting;     // make_janky_track()
using namespace spdlog;                     // for debug() etc.
#+end_src  

* What is a point cloud

A point cloud (here) is implemented by the class ~PointCloud::Dataset~.  In this context one may use the term "point cloud" and ~Dataset~ equivalently (and we introduce "selection" below which is also like a point cloud).

A ~Dataset~ is essentially a set of arrays implemented with the class ~PointCloud::Array~.  Each ~Array~ held by a ~Dataset~ by a "name" or a ~std::string~ key in a ~std::map~.  The ~Array~ instances are held by ~shared_ptr<Array>~ to avoid memory copies across the broader usage and to remove the need to worry about explicit memory management.

An ~Array~ owns a contiguous chunk of memory holding an array of elements (numbers).  The C++ type of the element (~double~, ~float~, ~size_t~, ~int~, etc) is expressed in a dynamic way.  That is, the ~Array~ class can hold elements of any type.  The C++ type can be restored via template ~Array~ methods.  This [[https://en.wikipedia.org/wiki/Type_erasure][type erasure]] allows ~Dataset~ to hold a heterogeneous collection of arrays.

An ~Array~ also holds its shape.  Eg, a 2D array may have shape ~(3,10)~.  That is, it has 3 rows and 10 columns.  For any dimensionality, the array has a "major axis size".  For example, a row-major 2D array of shape ~(3,10)~ has a "major axis size" of 10.

~Dataset~ assures that all its arrays have the "major axis size".  This allows an index along that axis to be interpreted as identifying a "point" with attributes.  If a ~Dataset~ has three arrays named "x", "y" and "z" then a point at a given major axis index has three attributes of the same name and with values as found at that index in each of the arrays.

Let's make such a ~Dataset~.

#+begin_src c++ :tangle doctest-pointtree-example.cxx
TEST_CASE("point tree example simple point cloud")
{
    Dataset pc({
        {"x", Array({1.0, 1.0, 1.0})},
        {"y", Array({2.0, 1.0, 3.0})},
        {"z", Array({1.0, 4.0, 1.0})}});
    
    // Each array is size 3 and thus the PC has that major axis size
    CHECK( pc.size_major() == 3 );
    
    // Accessing a single element in the PC takes two steps: get the array by
    // name, get the element by index.
    auto arr = pc.get("x");
    CHECK( arr );
    
    // We must supply a C++ type in order to extract a value.
    CHECK( arr->element<double>(0) == 1.0 );
#+end_src  
  
This last line requires special attention.  We must supply a C++ type to extract array values and this type must match the dynamic type of the array.  It is up to the programmers to know the types through contract / convention.

A ~Dataset~ can also yield a subset of its arrays in the form of a vector of shared pointers to the arrays called a *selection*.  The selection is defined by a list of array names and the order of that list determines the order of the arrays in the vector.  Here, we select "x", "y" and "z".

#+begin_src c++ :tangle doctest-pointtree-example.cxx
    Dataset::selection_t sel = pc.selection({"x","y","z"});

    // The selection must be the same size as the list of names.
    CHECK( sel.size() == 3 );

    // Get first array ("x") and the value at its index 0.
    CHECK( sel[0]->element<double>(0) == 1.0 );
#+end_src

In general, if not in this example, a selection is a subset of the ~Dataset~ arrays that are to be considered *coordinate points*.  A selection of coordinate points is essentially a point cloud with its arrays accessed by a dimension number instead of an array name and with some specific interpretations.  It represents points on coordinates axis that span some space (eg, 3D Cartesian space in this example) and which have the same numeric type (eg ~double~ or ~int~ but not a mix).  Below we will see how a selection is used to build a *k-d tree*.

We can better express these conventions in C++ using a special wrapper that holds the numeric type and wraps the selection.

#+begin_src c++ :tangle doctest-pointtree-example.cxx
    using point_type = coordinate_point<double>;
  
    // Create a coordinate point on the selection and at a given point index.
    point_type cpt(&sel, 0);
  
    // The index in the point cloud can be retrieved.
    CHECK( cpt.index() == 0 );
  
    // The point looks like a vector of size 3.
    CHECK( cpt.size() == 3);
  
    // And we can access the "column" at the current index by a dimension number.
    CHECK( cpt[0] == 1.0 );           // x
    CHECK( cpt[1] == 2.0 );           // y
    CHECK( cpt[2] == 1.0 );           // z

    // If the coordinate point is not const, it can be set.
    cpt.index() = 1;
    CHECK( cpt.index() == 1 );
  
    // We may also access the dimensions of the point with bounds checking on
    // both index and dimension.
    CHECK( cpt.at(0) == 1.0 );        // x
    CHECK( cpt.at(1) == 1.0 );        // y
    CHECK( cpt.at(2) == 4.0 );        // z
#+end_src

As shown, allowing the caller to set the ~index~ makes the ~coordinate_point~ able to traverse the different points (columns) in a selection.  The caller must be careful to set the ~index~ to be in bounds of the underlying ~Array~ instances in the selection.  Using the ~at(dim)~ method will check bounds and throw an exception if either the ~dim~ *or* the ~index~ are out of bounds.

But, explicitly setting ~index()~ is error prone and not convenient.  A safer and more convenient way to traverse the selection is provided by a *coordinate range* and its *iterators*.

#+begin_src c++ :tangle doctest-pointtree-example.cxx
    using coords_type = coordinate_range<point_type>;

    // Make a coordinate range on the selection.
    coords_type cr(sel);

    // Iterate over the selection, point by point.
    for (const auto& cpt : cr) {
        // Each cpt is a "column" down the rows of selected arrays.
        CHECK( cpt.size() == sel.size() );
    }
}
#+end_src

* What is a (n-ary) tree

  The above are all things that the point tree can provide.  But, what is meant by a "tree" here.  Specifically what is an *n-ary tree*?  Most generally speaking an n-ary tree is a directed acyclic graph that allows for n-way splits but joins are not allowed.  This means  that there is a unique *path* from the singular *root node* to each of the other nodes in the graph (tree).

  In the implementation described here, there is no actual "tree" object per se.  Rather, we work only with nodes.  A node may have a *parent* node a node may have zero or more *children* nodes.  A node with no parent is called the *root* node and this node may be considered as being a representative of a *tree*. 

  Children nodes are owned by a parent node in an ordered list of nodes.  Ownership is expressed by holding a child node in a ~std::unique_ptr~.  Since the ~unique_ptr<>~ is important, lets define a type for it.  The template argument will be described below.

#+begin_src c++ :tangle doctest-pointtree-example.cxx
using node_ptr = std::unique_ptr<Points::node_t>;
#+end_src  

  Children in this list are called *sibling* nodes.  By default, the order of siblings in this list is determined by the order in which the child node was inserted to the list.  The ordering implies that a child may have a *left sibling* (an "older child") and may have a *right sibling* (a "younger child").  This ordering is reflected in the order that nodes are seen in a depth-first descent of the tree.

  A child may be inserted to or removed from a parent.  When removed, the caller is given ownership though the ~std::unique_ptr~.  If the caller drops the removed child, it and any of its children will be destructed.  In either case (insertion or removal) the parent node, its parent, etc up to the root node, can receive notification of the change.  The ordering of any of the child list may be changed by the user but this will not (currently) trigger notification.


* What is a node

  Generically a node here is of type ~WireCell::NaryTree::Node<ValueType>~.  The two types are closely integrated.  The "node" knows about its "value" and vice versa.  This allows generic tree algorithms to operate on the "node side" while application-specific functionality can be provided by the "value side".

  For a *point tree*, the value type is the class ~WireCell::PointCloud::Tree::Points~.  This class provides the following application-specific features:

  - node-local point clouds
  - scoped point clouds
  - scoped k-d trees
  - callback methods to react to tree changes 
These features are described more below.

  Let's start by making a "node-free" ~Points~ instance with a single point cloud named "3d" that consists of three arrays named "x", "y" and "z".

#+begin_src c++ :tangle doctest-pointtree-example.cxx
TEST_CASE("point tree example nodeless points")
{
    Points p( { {"3d", Dataset({
            {"x", Array({1.0, 1.0, 1.0})},
            {"y", Array({2.0, 1.0, 3.0})},
            {"z", Array({1.0, 4.0, 1.0})}}) } });

    // Normally, we can get the node that holds this value but in this example
    // that node does not exist.
    CHECK( p.node() == nullptr );

    // But we can access the local point clouds.
    auto& lpcs = p.local_pcs();
    CHECK( lpcs.size() == 1 );
    CHECK( lpcs.find("3d") != lpcs.end() );
}
#+end_src  

* Interlude, running a test

  After tangling, the above test can be run with these commands:

  #+begin_example
    $ waf --target=wcdoctest-util
    $ ./build/util/wcdoctest-util -tc='point tree example nodeless points'
    [doctest] doctest version is "2.4.11"
    [doctest] run with "--help" for options
    ===============================================================================
    [doctest] test cases: 1 | 1 passed | 0 failed | 59 skipped
    [doctest] assertions: 3 | 3 passed | 0 failed |
    [doctest] Status: SUCCESS!
  #+end_example
  All tests made from this file can be run with a wildcard:
  #+begin_example
  $ ./build/util/wcdoctest-util -tc='point tree example*'
  #+end_example
  To see logging output, assign an environment variable ~SPDLOG_LEVEL=debug~:
  #+begin_example
  $ SPDLOG_LEVEL=debug ./build/util/wcdoctest-util -tc='point tree example*'
  #+end_example
  
* A value with a node

  We can extend the previous example to put the value into a node, and thus make our first if somewhat boring tree.  Since the value knows the node type (and vice versa) and since we can construct the node with a value, this extension is simple and similar to the above example.

#+begin_src c++ :tangle doctest-pointtree-example.cxx
TEST_CASE("point tree example single node")
{
    // Normally, we would not create a node on the stack as it could never be a
    // child because as a child must be held by unique_ptr.  
    Points::node_t n(Points( { {"3d", Dataset({
            {"x", Array({1.0, 1.0, 1.0})},
            {"y", Array({2.0, 1.0, 3.0})},
            {"z", Array({1.0, 4.0, 1.0})}}) } }));

    // The node directly exposes its value as a data member  
    Points& p = n.value;

    // And we can go full circle to get a pointer to the value's node.
    Points::node_t* nptr = p.node();

    // This time, that node must exist because we just made it
    CHECK( nptr == &n );
}
#+end_src  
  
* A larger but simple tree

  So far, so boring.  Let us now make a larger but still fairly simple tree.  We will put this into a local function that returns a ~unique_ptr<>~ (~node_ptr~).  It makes use of a function ~make_janky_track()~ provided by ~PointTesting.h~ to generate some point cloud.

#+begin_src c++ :tangle doctest-pointtree-example.cxx
static
Points::node_ptr make_simple_pctree()
{
    // We will return this unique pointer to node
    Points::node_ptr root = std::make_unique<Points::node_t>();

    // Insert first child with a set of named points clouds containing one point
    // cloud build from a track.
    auto* n1 = root->insert(Points({ {"3d", make_janky_track()} }));
    REQUIRE(n1 != nullptr);

    // Insert a second child with a point cloud from a different track.
    auto* n2 = root->insert(Points({ {"3d", make_janky_track(
                        Ray(Point(-1, 2, 3), Point(1, -2, -3)))} }));
    REQUIRE(n2 != nullptr);

    return root;
}
#+end_src  
  
Note, we construct the ~Points~ value as part of the insert.  If possible, this will take ~std::move()~ semantics, otherwise a copy is suffered.  Internally, a new node is created and held in a ~std::unique_ptr~.  However, the *bare* pointer to this new node is returned.  This is not transferring ownership and the caller is free to ignore the pointer.  At some later time, a caller may also retrieve the child pointer with methods provided on the node side.

* Do simple things with this simple tree

With this simple tree we may show off some of the functionality.

#+begin_src c++ :tangle doctest-pointtree-example.cxx
// Loop over children and dump info about them.
static void dump_children(const node_ptr& node)
{
    // Loop over children node "Points" values 
    for (auto& cval : node->child_values()) {
        // The named point clouds held by this node value.
        const auto& pcs = cval.local_pcs();

        debug("child node at {} with {} local point clouds",
              (void*)cval.node(), pcs.size());

        // loop over the set of point clouds
        for (const auto& [name, pc] : pcs) {
            debug("\tchild has pc named \"{}\" with {} points",
                  name, pc.size_major());
        }
    }
}

TEST_CASE("point tree example simple tree operations")
{
    auto root = make_simple_pctree();
    dump_children(root);

    // Find iterator to first child in child list
    CHECK( root->children().size() == 2 );
    auto cit = root->children().begin();

    // Remove it as a child and we get ownership as unique_ptr.
    auto cuptr = root->remove(cit);
    CHECK( root->children().size() == 1 );

    // We can add that orphaned child back.  This transfers ownership.
    auto* cptr = root->insert(std::move(cuptr));
    CHECK( root->children().size() == 2 );

    // But, we caught the return and now have a loaned bare pointer
    CHECK( cptr );

    // We should now see the reverse order as above dump.
    dump_children(root);
}
#+end_src  
Running this test will produce output similar to the following which has some extraneous parts suppressed:

#+begin_example
$ SPDLOG_LEVEL=debug ./build/util/wcdoctest-util -tc="point tree example simple tree operations"
child node at 0x1f9f0a0 with 1 local point clouds
	child has pc named "3d" with 74 points
child node at 0x1fa00a0 with 1 local point clouds
	child has pc named "3d" with 74 points
child node at 0x1fa00a0 with 1 local point clouds
	child has pc named "3d" with 74 points
child node at 0x1f9f0a0 with 1 local point clouds
	child has pc named "3d" with 74 points
#+end_example



* Scope 

Before we may explore the ~Points~ API further, let's take a break and talk about *scopes*.  A *scope* defines the extent of a "view" on the point tree.  The scope extends from a given node and covers a subset of arrays in a subset of point clouds held in a subset of nodes.  A scope is then triple of constraint values that define these subsets:

  1. a local point cloud name.
  2. a tree descent depth number.
  3. a list array names.

The scope then will cover all local point clouds with the given name that can be found from a depth-first search starting at the given node and limited by the descent depth number and that provide the list of array names.  The depth number gives the number of levels to descend.  A depth of 1 means only the starting node is considered, 2 includes the starting node and its children, 3 includes also the grand children, etc.  The special depth number of 0 means that there is no limit to the depth.

A scope is represented by the ~Scope~ class.  Here are some example ways that it may be used.

#+begin_src c++ :tangle doctest-pointtree-example.cxx
TEST_CASE("point tree example scope")
{
    // A default scope can be constructed.  It is a null scope as it would match
    // no local point cloud arrays despite having unlimited depth.
    Scope s;
    CHECK( s.pcname == "" );
    CHECK( s.coords.empty() );
    CHECK( s.depth == 0 );

    // Some non-empty scopes.  Note the case sensitivity in all names.
    Scope s0{ "pcname", {"x","y","z"}, 0};
    Scope s1{ "pcname", {"x","y","z"}, 1};
    Scope s2{ "PCNAME", {"x","y","z"}, 0};
    Scope s3{ "pcname", {"X","Y","Z"}, 0};
    Scope sc{ "pcname", {"x","y","z"}, 0};

    // Scopes can be compared for equality
    CHECK( s0 == s0 );
    CHECK( s0 == sc );
    CHECK( s0 != s1 );
    CHECK( s0 != s2 );
    CHECK( s0 != s3 );

    // A scope has a std::hash().
    CHECK( s0.hash() == sc.hash() );
    CHECK( s0.hash() != s1.hash() );
    CHECK( s0.hash() != s2.hash() );
    CHECK( s0.hash() != s3.hash() );

    // So, it may be used as a key.
    std::unordered_map<Scope, size_t> m;
    m[s1] = 1;
    m[s2] = 2;
    CHECK( m[s0] == 0 );          // size_t default value
    CHECK( m[s1] == 1 );
    CHECK( m[s2] == 2 );

    // One can also print a scope
    debug("Here is a scope: {}", s0);
}
#+end_src  

That ~debug()~ will show a line like:

#+begin_example
Here is a scope: <Scope "pcname" L0 x,y,z>
#+end_example


* Scoped point cloud

With scopes understood we can describe the *scoped point cloud*.  This is different from but made of the *local point cloud* held by a point tree node value (~Points~ object).  Like the local variant, a scoped point cloud is associated with and accessed from a point tree node value.  Conceptually, a scoped point cloud is an ordered sequence of local point clouds in a given scope relative to the node that provided it.  The order of this sequence mirrors the order of which nodes are visited in a depth-first descent of the tree starting from the given node and as limited by the scope descent depth number.  The content of this sequence is further limited by the visited node possessing the (local) point cloud named by the scope and that point cloud providing all arrays listed by the scope.

Let's now make a scoped point cloud using the same simple tree introduced above.

#+begin_src c++ :tangle doctest-pointtree-example.cxx
TEST_CASE("point tree example scoped point cloud")
{
    auto root = make_simple_pctree();

    // Specify point cloud name and the arrays to select.  We take the default
    // depth number of 0.
    Scope scope{ "3d", {"x","y","z"} };

    // The corresponding scoped point cloud. 
    auto spc = root->value.scoped_pc(scope);

    // A scoped point cloud is a vector of references to point clouds
    for (size_t ind=0; ind<spc.size(); ++ind) {
        Dataset& pc = spc[ind];
        debug("pc {} with {} arrays and {} points",
              ind, pc.size(), pc.size_major());
    }
}
#+end_src  

* Interlude: disjoint range

A scoped point cloud is a vector of (references to) individual node-local point clouds.  We have some contradictory requirements in how we wish to use a scoped point cloud.  On the one hand, we wish to keep the individual node-local point clouds distinct as each node represents something (eg a "blob").  On the other hand, we wish to avoid making copies as point clouds can be rather large.  On the [[https://en.wikipedia.org/wiki/The_Gripping_Hand][gripping hand]], we wish to use a scoped point cloud as if it were contiguous.

The scoped point cloud structure satisfies the first two.  To provide a contigous view of a scoped point cloud we combine the already introduced coordinate range
with a *disjoint range* that we introduce here.

A disjoint range allows for a "vector of vectors of elements" to look like a flat "vector of elements".  Below, will see it used internally in the interface to k-d trees, but here we will show how to use it directly.  

#+begin_src c++ :tangle doctest-pointtree-example.cxx
#include "WireCellUtil/DisjointRange.h"
TEST_CASE("point tree example scoped point cloud disjoint")
{
    // As above.
    auto root = make_simple_pctree();
    auto spc = root->value.scoped_pc(Scope{ "3d", {"x","y","z"} });

    size_t npoints = 0;
    for (const Dataset& pc : spc) {
        npoints += pc.size_major();
    }

    // This part is a bit verbose, see text.
    // First we select a subset of arrays from each point cloud.
    std::vector<Dataset::selection_t> sels;
    for (Dataset& pc : spc) {
        sels.push_back(pc.selection({"x","y","z"}));
    }
    // Then we wrap them as coordinate points.
    using point_type = coordinate_point<double>;
    using point_range = coordinate_range<point_type>;
    std::vector<point_range> prs;
    for (auto& sel : sels) {
        prs.push_back(point_range(sel));
    }
    // Finally we join them together as a disjoint range
    using points_t = disjoint_range<point_range>;
    points_t points;
    for (auto& pr : prs) {
        points.append(pr.begin(), pr.end());
    }

    // Finally, we can perform a simple iteration as if we had a single
    // contiguous selection.
    CHECK( points.size() == npoints );

    for (auto& pt : points) {
        CHECK( pt.size() == 3);
    }

    // We know the scoped PC has two local PCs.  Pick an index in either
    const size_t in0 = 0.25*npoints; // in local PC at index 0
    const size_t in1 = 0.75*npoints; // in local PC at index 1

    // Iterator to the first point
    auto beg = points.begin();

    // Iterators to points inside the flat disjoint_range.  Eg, as we will see
    // returned later from a k-d tree query.
    points_t::iterator mit0 = beg + in0;
    points_t::iterator mit1 = beg + in1;

    // Full circle, find that these points are provided by the first and second
    // major range.
    size_t maj0 = points.major_index(mit0);
    size_t maj1 = points.major_index(mit1);

    CHECK( 0 == maj0 );
    CHECK( 1 == maj1 );
}
#+end_src

The central part of this example is rather verbose as we have to implement a few layers of conversion.  However, these layers are largely light-weight and involve iterators and do not copy any array data.  When used in the interface to k-d trees, these layers are hidden from the caller.

A note on performance.  One can iterate though a disjoint range at linear cost.  However, take care that while ~disjoint_range~ provides a random-access API its cost is not $\mathcal{O}(1)$.  True random access requires an ordered walk of a ~std::map~ to find the local point cloud followed by $\mathcal{O}(1)$ access of elements of its arrays.  To mitigate the cost of finding the local point cloud the ~disjoint_range~ will cache its last location.  This allows the walk to the next index to be shorter on average than if it were to start at the beginning of the map each time.  When the caller must perform many random accesses it is advised to do so with pre-ordered indices so that the relative walk of the map is minimized.  The absolute speed of this "random" access is greatly improved when compiling with ~-O2~.


* Scoped k-d tree

A caller may also ask a node value (~Points~) for a "scoped k-d tree".  This is a k-d tree that is built upon a scoped point cloud with the same scope.  As such, the k-d tree "knows" about the disjoint nature of the scoped point cloud.  This allows the k-d tree grow as nodes are added to the tree that are in the scoped point cloud's and thus scoped k-d tree's scope.  When a k-d tree interface is requested from a node value the corresponding scoped point cloud will be created if it does not already exist.  Like with scoped point clouds, removing a node that is in scope will invalidate (delete) the scoped k-d tree.  The caller may re-request the scoped k-d tree and it will be recreated.

A k-nearest-neighbor (knn) and radius search is implemented by the k-d tree interface.  Results of either query are in the form of a vector of a pair consisting of a disjoint iterator (see ~disjoint_range~ above) and the distance from the point referenced by the iterator and the query point.

Let's exercise this using the simple tree.

#+begin_src c++ :tangle doctest-pointtree-example.cxx
TEST_CASE("point tree example scoped k-d tree")
{
    auto root = make_simple_pctree();

    // Form a k-d tree query over a scoped point cloud.
    Scope scope = { "3d", {"x","y","z"} };
    const auto& skd = root->value.scoped_kd<double>(scope);

    // Some query point.
    const std::vector<double> origin = {0,0,0};

    // Find three nearest neighbors.
    auto knn = skd.knn(3, origin);
    CHECK( knn.size() == 3 );

    // Get the underlying scoped PC.
    const auto& spc = root->value.scoped_pc(scope);

    // Need the underlying disjoint range to translate from k-d iterators to
    // indices.
    const auto& all_points = skd.points();

    // Loop over results and refrence back to original scoped PC at both major
    // and minor range level.
    for (size_t pt_ind = 0; pt_ind<knn.size(); ++pt_ind) {
        auto& [pit,dist] = knn[pt_ind];

        const size_t maj_ind = all_points.major_index(pit);
        const size_t min_ind = all_points.minor_index(pit);
        debug("knn point {} at distance {} from query is in local point cloud {} at index {}",
              pt_ind, dist, maj_ind, min_ind);
        const Dataset& pc = spc[maj_ind];
        for (const auto& name : scope.coords) {
            debug("\t{} = {}", name, pc.get(name)->element<double>(min_ind));
        }
    }
}
#+end_src  

Some of the logging output from this test would be like:

#+begin_example
knn point 0 at distance 0 from query is in local point cloud 1 at index 37
	x = 0
	y = 0
	z = 0
knn point 1 at distance 0 from query is in local point cloud 0 at index 37
	x = 0
	y = 0
	z = 0
knn point 2 at distance 0 from query is in local point cloud 0 at index 36
	x = 0
	y = 0
	z = 0
#+end_example

This example shows a k-nn query over a scope for the three points nearest the given query point (~origin~).  It ends in a loop over the results.  Each result provides an iterator and a distance (from point to query point).  The iterator over the ~disjoint_range~ that the k-d tree uses to hold a ~coordinate_range~ representation of each local point cloud.  We get that disjoint range in ~all_points~.

Inside the loop we can convert each iterator into a major and minor index via ~all_points~.  The major index counts the local point cloud in the scope while the minor index counts the point in that local point cloud.  In this example, the entire point cloud spans just three arrays, ~("x", "y", "z")~.  In more sophisticated usage, there may be additional arrays and through this major and minor index their elements that correspond to the k-d tree result can also be retrieved.


* File local variables                                     :noexport:

# Local Variables:
# org-src-preserve-indentation: t
# End:
