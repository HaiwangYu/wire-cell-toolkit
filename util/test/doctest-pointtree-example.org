#+title: The Point Tree Example
#+setupfile: ../../docs/setup-topic.org
#+LATEX_HEADER: \usepackage[margin=1.0in]{geometry}
#+include: ../../docs/setup-listings.org

* Overview

  A *point tree* refers to an [[https://en.wikipedia.org/wiki/M-ary_tree][n-ary tree]] with *nodes* that hold a set of "local" *point clouds*.  It is a data structure with many features and layers built upon these node-local point clouds.  We start here with a summary of its parts and then dive into each in more detail in subsequent section.

The caller may construct, prune, split, merge and navigate over the point tree manually or with a depth-first descent iteration.  This descent can be complete or limited to a particular depth.

Given any point tree node, the caller may request a node-local point cloud by *name* (~pcname~).  Any ~PointCloud::Dataset~ operations can be performed.  In particular, a *selection* of the point cloud arrays in the cloud may be created and  this selection may be viewed through a *coordinate array*.  This effectively applies a transpose of the selection so that an individual point may be accessed at a given index as an N-dimension vector-like *coordinate point*.

A broader *view* of a subset of the point tree information can be formed.  The view is defined by a *scope* that selects nodes based on a descent depth limit relative to a root/seed node, by a point cloud of a particular name and by the name of point cloud arrays from this point cloud to be used as a selection.  In a scope one may access these per-node values in a flattened manner by viewing them through a *disjoint range*.

Across the *coordinate arrays* in the scope a k-d tree may be formed.  The k-d tree may be queried to find the k-nearest-neighbors (~knn~) to a query point or all neighbors within some radius of a query point.  The query result returns a collection of pairs.  Each pair consists of an iterator from which the result point may be accessed and a distance between that point and the query point.

The iterator also provides a *major index* and a *minor index*.  The major index identifies the node in order defined by the scoped view descent and the minor index identifies the point in the original node-local point cloud.  

* Meta

This document is meant to be read linearly but one may also jump around to find specific examples.  In addition to prose describing various aspects, it provides working C++ code examples in the form of doctest test cases.  

  The source for this document is in org markup.  You may read that form directly or you may use Emacs to /export/ the org content to HTML with ~C-c C-e h h~ or to PDF with ~C-c C-e l p~.  The org content may also be /tangled/ to produce the ~doctest-pointtree-example.cxx~ source file with ~C-c C-v t~.  Depending on where you are reading this document the following links may take you to different formats: [[file:doctest-pointtree-example.html][HTML]], [[file:doctest-pointtree-example.pdf][PDF]], [[file:doctest-pointtree-example.cxx][C++]].

* Preamble

  The main entry point is the API in ~PointTree.h~.  Additional headers are for the doctest framework.

#+begin_src c++ :tangle doctest-pointtree-example.cxx
#include "WireCellUtil/PointTree.h"

#include "WireCellUtil/PointTesting.h"
#include "WireCellUtil/doctest.h"
#include "WireCellUtil/Logging.h"

using namespace WireCell;
using namespace WireCell::PointCloud;
using namespace WireCell::PointCloud::Tree; // for "Points"
using namespace WireCell::PointTesting;     // make_janky_track()
using namespace spdlog;                     // for debug() etc.
#+end_src  

* What is a point cloud

A point cloud (here) is implemented by the class ~PointCloud::Dataset~.  In this context one may use the term "point cloud" and ~Dataset~ equivalently (and we introduce "selection" below which is also like a point cloud).

A ~Dataset~ is essentially a set of arrays implemented with the class ~PointCloud::Array~.  Each ~Array~ held by a ~Dataset~ by a "name" or a ~std::string~ key in a ~std::map~.  The ~Array~ instances are held by ~shared_ptr<Array>~ to avoid memory copies across the broader usage and to remove the need to worry about explicit memory management.

An ~Array~ owns a contiguous chunk of memory holding an array of elements (numbers).  The C++ type of the element (~double~, ~float~, ~size_t~, ~int~, etc) is expressed in a dynamic way.  That is, the ~Array~ class can hold elements of any type.  The C++ type can be restored via template ~Array~ methods.  This [[https://en.wikipedia.org/wiki/Type_erasure][type erasure]] allows ~Dataset~ to hold a heterogeneous collection of arrays.

An ~Array~ also holds its shape.  Eg, a 2D array may have shape ~(3,10)~.  That is, it has 3 rows and 10 columns.  For any dimensionality, the array has a "major axis size".  For example, a row-major 2D array of shape ~(3,10)~ has a "major axis size" of 10.

~Dataset~ assures that all its arrays have the "major axis size".  This allows an index along that axis to be interpreted as identifying a "point" with attributes.  If a ~Dataset~ has three arrays named "x", "y" and "z" then a point at a given major axis index has three attributes of the same name and with values as found at that index in each of the arrays.

Let's make such a ~Dataset~.

#+begin_src c++ :tangle doctest-pointtree-example.cxx
  TEST_CASE("point tree example simple point cloud")
  {
      Dataset pc({
          {"x", Array({1.0, 1.0, 1.0})},
          {"y", Array({2.0, 1.0, 3.0})},
          {"z", Array({1.0, 4.0, 1.0})}});
      
      // Each array is size 3 and thus the PC has that major axis size
      CHECK( pc.size_major() == 3 );
      
      // Accessing a single element in the PC takes two steps:
      // get the array by name, get the element by index.
      auto arr = pc.get("x");
      CHECK( arr );
      
      // We must supply a C++ type in order to extract a value.
      CHECK( arr->element<double>(0) == 1.0 );
#+end_src  
  
This last line requires special attention.  We must supply a C++ type to extract array values and this type must match the dynamic type of the array.  It is up to the programmers to know the types through contract / convention.

A ~Dataset~ can also yield a subset of its arrays in the form of a vector of shared pointers to the arrays called a *selection*.  The selection is defined by a list of array names and the order of that list determines the order of the arrays in the vector.  Here, we select "x", "y" and "z".

#+begin_src c++ :tangle doctest-pointtree-example.cxx
    Dataset::selection_t sel = pc.selection({"x","y","z"});

    // The selection must be the same size as the list of names.
    CHECK( sel.size() == 3 );

    // Get first array ("x") and the value at its index 0.
    CHECK( sel[0]->element<double>(0) == 1.0 );
#+end_src

In general, if not in this example, a selection is a subset of the ~Dataset~ arrays that are to be considered *coordinate points*.  A selection of coordinate points is essentially a point cloud with its arrays accessed by a dimension number instead of an array name and with some specific interpretations.  It represents points on coordinates axis that span some space (eg, 3D Cartesian space in this example) and which have the same numeric type (eg ~double~ or ~int~ but not a mix).  Below we will see how a selection is used to build a *k-d tree*.

A selection is still "row major" in that one must get the array for a dimension and then index to get the scalar element value.  A transpose can be effected by viewing a selection through a *coordinate array*.

#+begin_src c++ :tangle doctest-pointtree-example.cxx
      // Defaults to point elements of type double
      coordinate_array ca(sel);
      CHECK( ca.ndims() == sel.size() );
  
      // Iterate over the selection, point by point.
      size_t count = 0;
      for (const auto& cpt : ca) {
          // Each cpt is a "column" down the rows of selected arrays.
          CHECK( cpt.size() == sel.size() );
          CHECK( cpt[0] == sel[0]->element(count) );
          ++count;
      }
  }
#+end_src

* What is a (n-ary) tree

  What is meant by a "tree" here.  Specifically what is an *n-ary tree*?  Most generally speaking an n-ary tree is a directed acyclic graph that allows for n-way splits but joins are not allowed.  This means  that there is a unique *path* from the singular *root node* to each of the other nodes in the graph (tree).

  In the implementation described here, there is no actual "tree" object per se.  Rather, we work only with nodes.  A node may have a *parent* node and a node may have zero or more *children* nodes.  A node with no parent is called the *root* node.  A root node may be considered the *representative* of its *tree*.  It is possible to navigate from any node to the root node and vice versa. 

  Children nodes are owned by a parent node in an ordered list of nodes.  Ownership is expressed by holding a child node in a ~std::unique_ptr~.  Since the ~unique_ptr<>~ is important, lets define a type for it.  The template argument will be described below.

#+begin_src c++ :tangle doctest-pointtree-example.cxx
using node_ptr = std::unique_ptr<Points::node_t>;
#+end_src  

  Children in this list are called *sibling* nodes.  By default, the order of siblings in this list is determined by the order in which the child node was inserted to the list.  The ordering implies that a child may have a *left sibling* (an "older child") and may have a *right sibling* (a "younger child").  This ordering is reflected in the order that nodes are seen in a depth-first descent of the tree.

  A child may be inserted to or removed from a parent.  When removed, the caller is given ownership by accepting a ~node_ptr~ as the return value from the node's ~remove()~ method.  If the caller drops this ~node_ptr~ the child node and any descendant nodes it may hod are destructed.  In either case (insertion or removal) the parent node, its parent, etc up to the root node, can receive notification of the change.  The ordering of any of the child list may be changed by the user but this will not (currently) trigger such notification.


* What is a node

  Generically a node here is of type ~WireCell::NaryTree::Node<ValueType>~.  The two types (node and value) are closely integrated.  The "node" knows about its "value" and vice versa.  This allows generic tree algorithms to operate on the "node side" while application-specific functionality can be provided by the "value side".

  For a *point tree*, the value type is the class ~WireCell::PointCloud::Tree::Points~.  This class provides the following application-specific features:

  - node-local point clouds
  - scoped point clouds
  - scoped k-d trees
  - callback methods to react to tree changes 
These features are described more below.

  Let's start by making a "node-free" ~Points~ instance with a single point cloud named "3d" that consists of three arrays named "x", "y" and "z".

#+begin_src c++ :tangle doctest-pointtree-example.cxx
  TEST_CASE("point tree example nodeless points")
  {
      Points p( { {"3d", Dataset({
              {"x", Array({1.0, 1.0, 1.0})},
              {"y", Array({2.0, 1.0, 3.0})},
              {"z", Array({1.0, 4.0, 1.0})}}) } });
  
      // Normally, we can get the node that holds this value
      // but in this example that node does not exist.
      CHECK( p.node() == nullptr );
  
      // But we can access the local point clouds.
      auto& lpcs = p.local_pcs();
      CHECK( lpcs.size() == 1 );
      CHECK( lpcs.find("3d") != lpcs.end() );
  }
#+end_src  

* Interlude, running a test

  The above test and others generated from this document can be run with these commands:

  #+begin_example
    $ waf --target=wcdoctest-util
    $ ./build/util/wcdoctest-util -tc='point tree example nodeless points'
    [doctest] doctest version is "2.4.11"
    [doctest] run with "--help" for options
    ===============================================================================
    [doctest] test cases: 1 | 1 passed | 0 failed | 59 skipped
    [doctest] assertions: 3 | 3 passed | 0 failed |
    [doctest] Status: SUCCESS!
  #+end_example
  All tests made from this file can be run with a wildcard:
  #+begin_example
  $ ./build/util/wcdoctest-util -tc='point tree example*'
  #+end_example
  To see logging output, assign an environment variable ~SPDLOG_LEVEL=debug~:
  #+begin_example
  $ SPDLOG_LEVEL=debug ./build/util/wcdoctest-util -tc='point tree example*'
  #+end_example
  
* A value with a node

  We can extend the previous example to put the value into a node, and thus make our first, if somewhat boring, tree.  Since the value knows the node type (and vice versa) and since we can construct the node with a value, this extension is simple and similar to the above example.

#+begin_src c++ :tangle doctest-pointtree-example.cxx
  TEST_CASE("point tree example single node")
  {
      // Normally, we would not create a node on the stack
      // as it could never be a child because as a child
      // must be held by unique_ptr.  
      Points::node_t n(Points( { {"3d", Dataset({
              {"x", Array({1.0, 1.0, 1.0})},
              {"y", Array({2.0, 1.0, 3.0})},
              {"z", Array({1.0, 4.0, 1.0})}}) } }));
  
      // The node directly exposes its value as a data member  
      Points& p = n.value;
  
      // And we can go full circle to get a pointer to the value's node.
      Points::node_t* nptr = p.node();
  
      // This time, that node must exist because we just made it
      CHECK( nptr == &n );
  }
#+end_src  
  
* A larger but simple tree

  So far, so boring.  Let us now make a larger but still fairly simple tree.  We will put this into a local function that returns a ~unique_ptr<>~ (~node_ptr~).  It makes use of a function ~make_janky_track()~ provided by ~PointTesting.h~ to generate some point cloud.

#+begin_src c++ :tangle doctest-pointtree-example.cxx
  static
  Points::node_ptr make_simple_pctree()
  {
      // We will return this unique pointer to node
      Points::node_ptr root = std::make_unique<Points::node_t>();
  
      // Insert first child with a set of named points clouds 
      // containing one point cloud build from a track.
      auto* n1 = root->insert(Points({ {"3d", make_janky_track()} }));
      REQUIRE(n1 != nullptr);
  
      // Insert a second child with a point cloud
      // from a different track.
      auto* n2 = root->insert(Points({ {"3d", make_janky_track(
                          Ray(Point(-1, 2, 3), Point(1, -2, -3)))} }));
      REQUIRE(n2 != nullptr);
  
      return root;
  }
#+end_src  
  
Note, we construct the ~Points~ value as part of the insert.  If possible, this will take ~std::move()~ semantics, otherwise a copy is suffered.  Internally, a new node is created and held in a ~std::unique_ptr~.  However, the *bare* pointer to this new node is returned.  This is not transferring ownership and the caller is free to ignore the pointer.  At some later time, a caller may also retrieve the child pointer with methods provided on the node side.

* Do simple things with this simple tree

With this simple tree we may show off some of the functionality.

#+begin_src c++ :tangle doctest-pointtree-example.cxx
// Loop over children and dump info about them.
static void dump_children(const node_ptr& node)
{
    // Loop over children node "Points" values 
    for (auto& cval : node->child_values()) {
        // The named point clouds held by this node value.
        const auto& pcs = cval.local_pcs();

        debug("child node at {} with {} local point clouds",
              (void*)cval.node(), pcs.size());

        // loop over the set of point clouds
        for (const auto& [name, pc] : pcs) {
            debug("\tchild has pc named \"{}\" with {} points",
                  name, pc.size_major());
        }
    }
}

TEST_CASE("point tree example simple tree operations")
{
    auto root = make_simple_pctree();
    dump_children(root);

    // Find iterator to first child in child list
    CHECK( root->children().size() == 2 );
    auto cit = root->children().begin();

    // Remove it as a child and we get ownership as unique_ptr.
    auto cuptr = root->remove(cit);
    CHECK( root->children().size() == 1 );

    // We can add that orphaned child back.  This transfers ownership.
    auto* cptr = root->insert(std::move(cuptr));
    CHECK( root->children().size() == 2 );

    // But, we caught the return and now have a loaned bare pointer
    CHECK( cptr );

    // We should now see the reverse order as above dump.
    dump_children(root);
}
#+end_src  
Running this test will produce output similar to the following which has some extraneous parts suppressed:

#+begin_example
$ SPDLOG_LEVEL=debug ./build/util/wcdoctest-util -tc="point tree example simple tree operations"
child node at 0x1f9f0a0 with 1 local point clouds
	child has pc named "3d" with 74 points
child node at 0x1fa00a0 with 1 local point clouds
	child has pc named "3d" with 74 points
child node at 0x1fa00a0 with 1 local point clouds
	child has pc named "3d" with 74 points
child node at 0x1f9f0a0 with 1 local point clouds
	child has pc named "3d" with 74 points
#+end_example



* Scope 

Before we may explore the ~Points~ API further, let's take a break and talk about *scopes*.  A *scope* defines the extent of a "view" on the point tree.  The scope extends from a given node and covers a *subset of arrays* in a *subset of point clouds* held in a *subset of nodes*.  A scope is then defined by the triplet of constraint values that define these subsets:

  1. a local point cloud name (~pcname~).
  2. a tree descent depth number (~depth~).
  3. a list array names (~coords~).

The scope then will cover all local point clouds with the given name that can be found from a depth-first search starting at the given node and limited by the descent depth number and that provide the list of array names.  The depth number gives the number of levels to descend.  A depth of 1 means only the starting node is considered, 2 includes the starting node and its children, 3 includes also the grand children, etc.  The special depth number of 0 means that there is no limit to the depth.

A scope is represented by the ~Scope~ class.  Here are some ways that it may be used.

#+begin_src c++ :tangle doctest-pointtree-example.cxx
  TEST_CASE("point tree example scope")
  {
      // A default scope can be constructed.
      // It is a null scope as it would match no local 
      // point cloud arrays despite having unlimited depth.
      Scope s;
      CHECK( s.pcname == "" );
      CHECK( s.coords.empty() );
      CHECK( s.depth == 0 );
  
      // Some non-empty scopes.  Note the case sensitivity.
      Scope s0{ "pcname", {"x","y","z"}, 0};
      Scope s1{ "pcname", {"x","y","z"}, 1};
      Scope s2{ "PCNAME", {"x","y","z"}, 0};
      Scope s3{ "pcname", {"X","Y","Z"}, 0};
      Scope sc{ "pcname", {"x","y","z"}, 0};
  
      // Scopes can be compared for equality
      CHECK( s0 == s0 );
      CHECK( s0 == sc );
      CHECK( s0 != s1 );
      CHECK( s0 != s2 );
      CHECK( s0 != s3 );
  
      // A scope has a std::hash().
      CHECK( s0.hash() == sc.hash() );
      CHECK( s0.hash() != s1.hash() );
      CHECK( s0.hash() != s2.hash() );
      CHECK( s0.hash() != s3.hash() );
  
      // So, it may be used as a key.
      std::unordered_map<Scope, size_t> m;
      m[s1] = 1;
      m[s2] = 2;
      CHECK( m[s0] == 0 );          // size_t default value
      CHECK( m[s1] == 1 );
      CHECK( m[s2] == 2 );
  
      // One can also print a scope
      debug("Here is a scope: {}", s0);
  }
#+end_src  

That ~debug()~ will show a line like:

#+begin_example
Here is a scope: <Scope "pcname" L0 x,y,z>
#+end_example


* Scoped view

The point tree will provide to the caller a *scoped view* object (~ScopedView~) that collects the information that from the point tree that is in a given scope.


#+begin_src c++ :tangle doctest-pointtree-example.cxx
  TEST_CASE("point tree example scoped point cloud")
  {
      auto root = make_simple_pctree();
  
      // Specify point cloud name and the arrays to select.  
      // We take the default depth number of 0.
      Scope scope{ "3d", {"x","y","z"} };
  
      // The corresponding scoped view. 
      auto const & sv = root->value.scoped_view(scope);
  
      CHECK(sv.npoints() > 0);
  }
#+end_src  

The ~scoped_view()~ method returns a ~ScopedView<double>~ by default.  The numeric template type must match the underlying type of the coordinates given by the scope.

A it is a *view*, the ~sv~ object lifetime can not be longer than that of the tree (~root~ node).  If a node is *inserted* to a viewed scope, that view will be *mutated* by appending to the view's contents.  On the other hand, if  a node is *removed* from a viewed scope then the view is *invalidated*.  The caller must retrieve the scoped view to get a valid view.

We now look at the major parts of the scoped view.

- vector of nodes
- vector of local PCs of the scope's ~pcname~ 
- vector of selections on these PCs with arrays named as given by the scope's ~coords~
- a k-d tree built on these selections

The three vectors have the same size and order.

* Scoped nodes

The *scoped nodes* are presented as a vector of pointers to nodes.  The vector is nominally in the order in which the nodes were encountered by the scoped depth-first descent.  In the case that additional in-scope nodes were added to a tree after the view was created they will appear appended to the scoped node vector.

#+begin_src c++ :tangle doctest-pointtree-example.cxx
  TEST_CASE("point tree example scoped nodes")
  {
      auto root = make_simple_pctree();
  
      Scope scope{ "3d", {"x","y","z"} };
      auto const & sv = root->value.scoped_view(scope);
  
      // Vector of pointers to n-ary tree nodes
      auto const& snodes = sv.nodes();
      CHECK(snodes.size() > 0);
      for (const auto& node : snodes) {
          const auto& lpcs = node->value.local_pcs();
          REQUIRE(node);
          CHECK(lpcs.find("3d") != lpcs.end());
      }
  }
#+end_src  

* Scoped point cloud

The *scoped point cloud* collects the *local point cloud* from each in-scope node that is named by the scope's ~pcname~.   The scoped point cloud is presented as a vector of references to the original point cloud and in the same order as the scoped node vector.  As the scoped point cloud keeps the individual local point clouds distinct it has the structure of an "array-of-array-of-points".  A ~disjoint_range~ may be used to iterate over the points in a scoped point cloud as if it were a flat collection of points (this type is described more below).  

Let's now make a scoped point cloud using the same simple tree introduced above.

#+begin_src c++ :tangle doctest-pointtree-example.cxx
    TEST_CASE("point tree example scoped nodes")
    {
        auto root = make_simple_pctree();
  
        Scope scope{ "3d", {"x","y","z"} };
        auto const & sv = root->value.scoped_view(scope);
  
        auto const& snodes = sv.nodes();
        auto const& spcs = sv.pcs();
        CHECK(spcs.size() == snodes.size());
  
        // A scoped point cloud is a vector of
        // references to node-local point clouds
        for (const Dataset& pc : spcs) {
            debug("pc {} arrays and {} points",
                  pc.size(), pc.size_major());
        }
  }
#+end_src  

* Interlude: disjoint range

A scoped point cloud is a collection of individual node-local point clouds.  We have some contradictory requirements in how we wish to use a scoped point cloud.  On the one hand, we wish to keep the individual node-local point clouds distinct as each node represents something (eg a "blob").  On the other hand, we wish to avoid making copies as point clouds can be rather large.  On the [[https://en.wikipedia.org/wiki/The_Gripping_Hand][gripping hand]], we wish to use a scoped point cloud as if it were contiguous.

The scoped point cloud structure satisfies the first two.  To provide a contigous view of a scoped point cloud we combine the already introduced coordinate range with a *disjoint range* that we introduce here.

A disjoint range allows for a "vector of vectors of elements" to look like a flat "vector of elements".  Below, will see it used internally in the interface to k-d trees, but here we will show how to use it directly.  

#+begin_src c++ :tangle doctest-pointtree-example.cxx
  #include "WireCellUtil/DisjointRange.h"
  TEST_CASE("point tree example scoped point cloud disjoint")
  {
      // As above.
      auto root = make_simple_pctree();
      auto spc = root->value.scoped_view(Scope{ "3d", {"x","y","z"} }).pcs();
  
      size_t npoints = 0;
      for (const Dataset& pc : spc) {
          npoints += pc.size_major();
      }
  
      // This part is a bit verbose, see text.
      // First we select a subset of arrays from each point cloud.
      std::vector<Dataset::selection_t> sels;
      for (Dataset& pc : spc) {
          sels.push_back(pc.selection({"x","y","z"}));
      }
      // Then we wrap them as coordinate points.
      using point_array = coordinate_array<double>;
      std::vector<point_array> pas;
      for (auto& sel : sels) {
          pas.emplace_back(sel);
      }
      // Finally we join them together as a disjoint range
      using points_t = disjoint_range<point_array>;
      using point_type = points_t::value_type;
  
      points_t points;
      for (auto& pa : pas) {
          points.append(pa);
      }
  
      // Finally, we can perform a simple iteration
      // as if we had a single contiguous selection.
      CHECK( points.size() == npoints );
  
      for (points_t::iterator pit = points.begin();
          pit != points.end(); ++pit) {
          point_type& pt = *pit;
          CHECK( pt.size() == 3);
          for (size_t dim=0; dim<3; ++dim) {
              debug("pt[{}][{}]={}", std::distance(points.begin(), pit),
                    dim, pt.at(dim));
          }
      }
  
      // We know the scoped PC has two local PCs.
      // Pick an index in either
      const size_t in0 = 0.25*npoints; // in local PC at index 0
      const size_t in1 = 0.75*npoints; // in local PC at index 1
  
      // Iterator to the first point
      auto beg = points.begin();
  
      // Iterators to points inside the flat disjoint_range.  
      // Eg, as we will see returned later from a k-d tree query.
      points_t::iterator pit0 = beg + in0;
      CHECK( pit0 == beg + in0 );
      points_t::iterator pit1 = beg + in1;
      CHECK( pit0 != pit1 );
  
      for (size_t dim=0; dim<3; ++dim) {
          debug("dim={}: {} {}", dim, pit0->at(dim), pit1->at(dim));
      }
  
      // Full circle, find that these points are provided 
      // by the first and second major range.
      const auto djind0 = pit0.index();
      const auto djind1 = pit1.index();
  
      CHECK( 0 == djind0.first );
      CHECK( 1 == djind1.first );
  
      // Can also use major/minor indices to get elements
      // with checked and unchecked lookups.
      {
          auto& qt0 = points.at(djind0);
          auto& qt1 = points.at(djind1);
          for (size_t dim=0; dim<3; ++dim) {
              CHECK( pit0->at(dim) == qt0.at(dim) );
              CHECK( pit1->at(dim) == qt1.at(dim) );
          }
      }
  }
#+end_src

The central part of this example is rather verbose as we have to implement a few layers of conversion.  However, these layers are largely light-weight and involve iterators and do not copy any array data.  When used in the interface to k-d trees, these layers are hidden from the caller.

A note on performance.  One can iterate though a disjoint range at linear cost.  However, take care that while ~disjoint_range~ provides a random-access API its cost is not $\mathcal{O}(1)$.  True random access requires an ordered walk of a ~std::map~ to find the local point cloud followed by $\mathcal{O}(1)$ access of elements of its arrays.  To mitigate the cost of finding the local point cloud the ~disjoint_range~ will cache its last location.  This allows the walk to the next index to be shorter on average than if it were to start at the beginning of the map each time.  When the caller must perform many random accesses it is advised to do so with pre-ordered indices so that the relative walk of the map is minimized.  The absolute speed of this "random" access is greatly improved when compiling with ~-O2~.

And alternative element access mechanism is available for disjoint ranges.  It is true random access but exposes the disjoint nature.  This is shown by the use of the ~djind~ variable which is a pair of *major* and *minor* indices.  The major index selects an element of the "outer range" (eg, selects information from one node in scope) and the minor index selects an element of the "inner range" (eg, one point in the node-local point cloud).

* Scoped k-d tree

The scoped view also provides a *k-d tree* formed on the scoped point cloud (specifically the coordinate array formed on its selections).  The k-d tree "knows" about the disjoint nature of the scoped point cloud and it can grow as nodes are added in scope.

A k-nearest-neighbor (knn) and radius search is implemented by the k-d tree interface.  Results of either query are in the form of a vector of a pair consisting of a disjoint iterator (see ~disjoint_range~ above) and the distance from the point referenced by the iterator and the query point.  The iterator yields a vector-like point as well as a *major index* and a *minor index*.  The major index counts into the vectors provided by the scoped view and the minor index counts to the point within the local point cloud at that index.  These two indices allow the caller to navigate from each point in a k-d tree query result to the node that provided the point or to get point attributes in the point cloud that provided the point other than those that were used for k-d tree coordinates.

We will see some of this navigation below but lets first just exercise a k-d tree query.

#+begin_src c++ :tangle doctest-pointtree-example.cxx
  TEST_CASE("point tree example scoped k-d tree")
  {
      auto root = make_simple_pctree();
  
      // Form a k-d tree query over a scoped point cloud.
      Scope scope = { "3d", {"x","y","z"} };
      const auto& sv = root->value.scoped_view(scope);
      const auto& skd = sv.kd();
  
      // Some query point.
      const std::vector<double> origin = {0,0,0};
  
      // Find three nearest neighbors.
      const size_t nnn = 10;    
      REQUIRE(skd.points().size() >= nnn);

      auto knn = skd.knn(nnn, origin);
      CHECK( knn.size() == nnn );
  
      // Get the underlying scoped PC.
      const auto& spc = sv.pcs();
  
      // Loop over results and refrence back to original 
      // scoped PC at both major and minor range level.
      for (size_t pt_ind = 0; pt_ind<knn.size(); ++pt_ind) {
          auto& [pit,dist] = knn[pt_ind];
  
          const auto [maj_ind,min_ind] = pit.index();
          debug("knn point {} at distance {} from query is in local point cloud {} at index {}",
                pt_ind, dist, maj_ind, min_ind);
          const Dataset& pc = spc[maj_ind];
          const size_t ndim = scope.coords.size();
          // Iterate over the point's dimensions and compare 
          // what is in the PC and what is in the iterator.
          for (size_t dim=0; dim<ndim; ++dim) {
              std::string const& name = scope.coords[dim];
              auto arr_from_pc = pc.get(name);
              double ele_from_pc = arr_from_pc->element(min_ind);
              double ele_from_it = pit->at(dim);
              CHECK(ele_from_it == ele_from_pc);
              debug("\t{} = {}", name, ele_from_pc);
          }
      }
  }
#+end_src  
Suppressing some of the logging output, one may see lines like:

#+begin_example
 knn point 9 at distance 0.020000000000000004 from query is in local point cloud 0 at index 39
 	x = 0
 	y = 0.1
 	z = 0.1
#+end_example

This example shows a k-nn query over a scope for the three points nearest the given query point (~origin~).  It ends in a loop over the results.  Each result provides an iterator and a distance (from point to query point).  The iterator is over the ~disjoint_range~ that the k-d tree uses to hold a ~coordinate_range~ representation of each local point cloud.  We convert the iterator to a corresponding major and minor index.  We use the major index to locate the point cloud that provided the point.  The minor index is used to index arrays in the point cloud.  In this example, we merely access the same attributes that supplied the coordinates ("x", "y" and "z").  Had the point cloud provided additional arrays we could off course access their attributes with the minor index as well.

* From k-d tree to n-ary tree 

Very similarly, we may navigate from the k-d tree result iterator via the major index to get the node that provided the point cloud that provided the point.

#+begin_src c++ :tangle doctest-pointtree-example.cxx
  // a little helper
  static const Dataset& get_local_pc(const Points& pval, const std::string& pcname)
  {
      const auto& pcs = pval.local_pcs();
      auto pcit = pcs.find(pcname);
      if (pcit == pcs.end()) {
          raise<KeyError>("no pc named " + pcname);
      }
      return pcit->second;
  }
  
  TEST_CASE("point tree example scoped k-d tree to n-ary nodes")
  {
      auto root = make_simple_pctree();
  
      // Form a k-d tree query over a scoped point cloud.
      Scope scope = { "3d", {"x","y","z"} };
  
  
      // Get the scoped view parts
      const auto& sv = root->value.scoped_view(scope);
      const auto& skd = sv.kd();
      const auto& snodes = sv.nodes();
  
      // Some query point.
      const std::vector<double> origin = {0,0,0};
  
      // Find three nearest neighbors.
      auto knn = skd.knn(3, origin);
      CHECK( knn.size() == 3 );
  
      for (size_t pt_ind = 0; pt_ind<knn.size(); ++pt_ind) {
          auto& [pit,dist] = knn[pt_ind];
  
          // This time use major index to get node.
          const auto djind = pit.index();
          const auto* node = snodes[djind.first];
  
          debug("knn point {} at distance {} from query at node {} with {} children",
                pt_ind, dist, djind.first, node->children().size());
      }
  }
#+end_src  

Notes:
- scope is more restrictive than ~depth()~.  Misalignment between the major index (~djind.first~) and the depth iterator will occur if nodes otherwise in scope may lack a local point cloud of the name given by ~scope.pcname~.


* Helper functions

A family of functions are provided to perform common calculations and operations on the data types described above.

** Coordinate means

Weighted and unweighted means can be produced.

#+begin_src c++ :tangle doctest-pointtree-example.cxx
  #include "WireCellUtil/Point.h"
  TEST_CASE("point tree example point means")
  {
      Dataset pc({
          {"q", Array({1.0, 2.0, 5.0})},
          {"x", Array({1.0, 1.0, 1.0})},
          {"y", Array({2.0, 1.0, 3.0})},
          {"z", Array({1.0, 4.0, 1.0})}});
      
      auto xyz = pc.selection({"x","y","z"});
      coordinate_range coords(xyz);

      // Find the mean point as a Point type
      Point mu;
      mean_point(mu, coords);
      debug("mean point: ({},{},{})", mu.x(), mu.y(), mu.z());
      CHECK(mu.x() == 1.0);
      CHECK(mu.y() == 2.0);
      CHECK(mu.z() == 2.0);

      // Find the weighted mean point as a std::vector type.  We must pre-size
      // it.
      std::vector<double> wmu(3);
      mean_point(wmu, coords, pc.get("q")->elements());
      debug("weighted mean point: ({},{},{})", wmu[0], wmu[1], wmu[2]);
      CHECK(wmu[0] == 1.0);
      CHECK(wmu[1] == 2.375);
      CHECK(wmu[2] == 1.75);
  }
#+end_src  

* Caveats

There are some C++ things to be careful of in using this complex data structure.

** Coordinate array points are references.

A ~coordinate_array~ produces its transpose on a selection by returning a *reference* to a ~coordinate_array::point~.  To save memory, this point maintains invasive information about the ~coordinate_array~ from which it came.  It can not be copied or else it will sever that connection.

** Disjoint ranges are views

When forming a *disjoint range* the caller is required to keep alive the collection-of-collections alive and stable in memory.  The disjoint range operates through iterators and if those iterators are made invalid by the caller then the disjoint range will be left holding garbage.  In particular be aware that ~std::vector~ is *not stable* if it is appended.  Producing a ~disjoint_range~ on a vector and then calling ~push_back()~ or similar on that vector will very likely leave garbage in the ~disjoint_range~.  Best to fill the vector entirely before forming any disjoint range, including the one formed inside a *k-d tree*.  A ~std::map~ can be enlarged and its previous memory will remain stable and its iterators not invalidated.  Likewise, a disjoint range formed through a scoped view will be stable upon subsequent node insertion.

* File local variables                                     :noexport:

# Local Variables:
# org-src-preserve-indentation: t
# End:
