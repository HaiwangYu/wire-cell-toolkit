#+title: Wire-Cell Gen
#+SETUPFILE: ../setup-readme.org

This is the Wire-Cell "gen" sub-package.  It provides components
related to generating simulated data.  In particular:

- simple ionization deposition (depos) generators,
- drifting depos in the bulk volume of the detector,
- diffusion of these charges as they drift,
- convolution of drifted ionization with detector responses
- sampling fluctuations,
- intrinsic and coherent noise simulation
- ADC waveform digitization. of charge on the wire planes.

What follows are various, non-exhaustive notes on parts of the
sub-package.


* Noise simulations

There are currently two types of noise simulations:

- Incoherent aka intrinsic aka thermal noise generates unique noise
  waveform contributions for a given channel.

- Coherent aka RF aka common noise generates a noise waveform
  contribution and applies it to a fixed set of channels.

** Code overview

The two types of noise are handled with some symmetry.  Each type has
a "noise adder" data flow graph node type (~IncoherentAddNoise~ ne'
~AddNoise~ and ~CoherentAddNoise~) and each type of noise has a "nosie
model" interface type (~IChannelSpectrum~ and ~IGroupSpectrum~).

The ~EmpiricalNoiseModel~ is an incoherent type model which takes into
account differing noise as a function of wire length and uses a
configuration file to provide spectra.

The ~GroupNoiseModel~ is *both* an incoherent and coherent type model and
uses a pair of configuration files to provide noise associated with a
group of channels and the channels which are a member of each group.
Typically you will use ~GroupNoiseModel~ with either incoherent data and
with ~IncoherentAddNoise~ or with coherent data and ~CoherentAddNoise~ and
neither the tween shall mix.

** Providing noise spectra

Though details of these files differ, in all cases spectra are
supplied following these specifications:

- ~freqs~ :: an array of frequencies in WCT system of units (not, the
  base unit of frequency in WCT is [1/time] = 1/ns and *not* Hz).

- ~amps~ :: an array of *mean spectral amplitude* with each element a
  measurement corresponding to the same element of ~freqs~.

The ~amps~ vs ~freqs~ sampling need *not*, and likely should not, match the
internal sampling used in the simulation.  The input sampling need
note even be regular nor complete.  An input spectrum consisting of a
single sample will technically work.  However, for accuracy, enough
samples of the spectrum should be provided so that its shape is well
represented.  Internally, the input spectra will be *linearly
interpolated* and *constant extrapolated* to produce whatever sampling
the simulation requires.

The value of elements of the ~amps~ array must provide an *mean spectral
amplitude* (specifically not mode) and it must be properly normalized.
The following guidelines describe a procedure to produce input
spectra.

- Collect a set of raw ADC waveforms in some manner that *excludes
  signal*.  Examining the distribution of ADC in a waveform around the
  *median* ADC of that waveform is one good way to detect if it has been
  "contaminated" with signal.

- Apply the forward discrete Fourier transform (DFT) to each waveform
  using no FT normalization (do *not* divide by 1/N nor 1/sqrt(N)).
  This gives a complex spectra.

- Take the absolute value of that spectra to get a real spectral
  amplitude for that waveform.

- Repeat with all the waveforms in the set and form the *mean spectral
  amplitude* by simply summing on a per-frequency-bin basis and
  dividing by the number of waveforms in the set.

- Write out the result.  Values above the Nyquist frequency are not
  required.  Down sampling may be desired for large sets of spectra.

If creation of mean spectra is performed by WCT C++ the developer may
use:

#+begin_src c++
  #include "WireCellAux/Spectra.h"
  // ...
  IDFT::pointer dft = ...;
  WaveCollector wavecol(dft);
  for (auto wave : waves) {
      wavecol.add(wave);
  }
  auto spec = wavecol.mean();
#+end_src

** Legacy ~NoiseSource~

The ~NoiseSource~ is a data flow graph node type in the source category
which produces incoherent noise.  Someone who wants a job should
refactor it to use the same ~Noise.h~ base classes and patterns as found
in ~AddNoise.h~.
