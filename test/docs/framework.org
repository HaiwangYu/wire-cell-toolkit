#+title: Wire-Cell Toolkit Testing Framework
#+latex_header: \usepackage[margin=1in]{geometry}
#+options: ':t toc:t

This document describes the WCT test framework.

* Overview

WCT provides a large and growing suite of self-tests.  When they pass, they assure a variety of correct or at least expected behavior.  Examples of the behavior tested:

- compilation against the WCT API.

- run-time against the WCT libraries.

- code functionality at different scales.

- validity of results from known input.

- stability of results across releases.

Tests are developed in the WCT testing framework as described in this document.

* Basic test requirements

The source file for a test program must found as:

#+begin_example
<pkg>/test/<prefix-and-name>.<ext>
#+end_example
With ~<prefix-and-name>~ matching:
#+begin_example
<prefix>[_-]<name>
#+end_example
The ~<pkg>~ names the sub package directory name.
The ~<prefix>~ generally is identical to the test /group/ name though prefixes are allowed (see below).
The ~<name>~ should be made unique across all tests of all packages.  Based on the file name extension ~<ext>~, the test may be compiled or interpreted by the testing framework.
An underscore ("~_~") or hyphen ("~-~") separating ~<group>~ and ~<name>~ are optional.

A test program:
- should include at least one check for proper behavior that may fail,
- must exit with a non-zero status code when failure is encountered.
- must exit with a zero status code when no failure is encountered.
- should be fast to compile/interpret and execute.
- should cover a minimum of code scope needed to perform its checks.
- must not depend on the execution of other tests (in its group).

All tests in a group are executed independently and each group is executed in sequence.  A test in one group may depend on programs or their results from a prior group.

The test groups names are:

- check :: simply compile a program but do not run.
- atomic :: is a basic test.  It may also have a ~<prefix>~ of ~test~.
- history :: intended to run after all atomic tests and potentially consume data from prior campaigns and/or produce data for future campaigns.  See document [[file:datarepo.org]].
- report :: intended as a final stage to produce material for human inspection.

* Executing tests

The user executed tests in three different ways.

** Automated campaign

By default, *no tests are executed*.  To execute tests the ~--tests~ option may be given at configure time:
#+begin_example
  wcb configure --tests [...]
#+end_example
By default, when tests are enabled, the entire test group sequence is executed.  This sequence can be shortened by naming a different terminating group:
#+begin_example
  wcb configure --tests --test-group=atomic [...]
#+end_example
These values may be overridden during the ~wcb build~ phase.  For example, if the build was configured to turn on tests with the default terminating group one can change the group or turn off testing.
#+begin_example
  wcb --test-group=atomic
  wcb --notests
#+end_example
Likewise, if testing was configured off, one can turn it back on during building
#+begin_example
  wcb --tests
#+end_example
The values given at configure time may be viewed with:
#+begin_example
  wcb dumpenv|grep 'wcb: TEST'
#+end_example

*** Skip long tests

Some tests take many minutes to complete.  Each time they are run, their run time is recorded.  Subsequent testing campaigns may exclude all test that are expected to require more time than a given test duration:
#+begin_example
  wcb --test-duration=<seconds>
#+end_example

** Targeted execution

Assuming the build was configured with ~--test~, an individual test may be run explicitly via ~wcb~ by giving its "target name":
#+begin_example
  wcb --target=test_testing
#+end_example
Test target names are derived from source file names with file name extension removed.  Interpreted tests will have the interpreter name appended.
A listing of all targets including those for tests can be found with:
#+begin_example
  wcb list
#+end_example
To force a particular test to be rerun after it has been run once:
#+begin_example
  wcb --target=test_testing --alltests
#+end_example
If the build was not configured with the ~--test~ option, this option must be added to the above examples to enable them to actually operate on tests.

** Direct execution

A test program may be executed directly from the shell command line.  Compiled tests are found under ~build/<pkg>/<prefix-and-name>~.  Interpreted test files are left in-place in the source trees and must be run with an appropriate interpreter.  Here are some examples of directly running tests:

#+begin_example
./build/util/test_testing
wcsonnet cfg/test/test_wirecell.jsonnet
bats test/test/test_bats.bats
#+end_example

* Test source

A test source file must be located as described in Section [[Basic test requirements]].
Some examples:
#+begin_example
util/test/test_testing.cxx
gen/test/test-addnoise.bats
util/test/check_act2viz.cxx
#+end_example

The supported file extensions include:

- ~cxx~ :: a C++ program (see [[file:cpp.org]])
- ~bats~ :: a Bash Automated Test System file (see [[file:bats.org]])
- ~py~ :: a Python program (see [[file:python.org]])
- ~sh~ :: a shell script (see [[file:shell.org]])
- ~jsonnet~ :: a Jsonnet structure (see [[file:jsonnet.org]])
The links above may be consulted for details of how to write tests in any of the supported languages.  The remainder of this document provides general information about executing tests.




